/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package propTest;

import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.hipparchus.geometry.euclidean.threed.Vector3D;
import org.hipparchus.ode.nonstiff.AdaptiveStepsizeIntegrator;
import org.hipparchus.ode.nonstiff.DormandPrince853Integrator;
import org.orekit.data.DataContext;
import org.orekit.data.DataProvidersManager;
import org.orekit.data.DirectoryCrawler;
import org.orekit.forces.ForceModel;
import org.orekit.forces.gravity.potential.GravityFieldFactory;
import org.orekit.forces.gravity.potential.NormalizedSphericalHarmonicsProvider;
import org.orekit.forces.gravity.HolmesFeatherstoneAttractionModel;
import org.orekit.frames.Frame;
import org.orekit.frames.FramesFactory;
import org.orekit.frames.ITRFVersion;
import org.orekit.orbits.KeplerianOrbit;
import org.orekit.orbits.OrbitType;
import org.orekit.orbits.PositionAngle;
import org.orekit.propagation.SpacecraftState;
import org.orekit.propagation.analytical.tle.TLE;
import org.orekit.propagation.conversion.FiniteDifferencePropagatorConverter;
import org.orekit.propagation.conversion.PropagatorBuilder;
import org.orekit.propagation.conversion.TLEPropagatorBuilder;
import org.orekit.propagation.numerical.NumericalPropagator;
import org.orekit.time.AbsoluteDate;
import org.orekit.utils.Constants;
import org.orekit.utils.IERSConventions;
import org.orekit.utils.PVCoordinates;
import org.orekit.time.TimeScalesFactory;
import org.orekit.propagation.analytical.tle.TLEPropagator;

public class Propagation
{
    private static final Logger logger = Logger.getLogger( Propagation.class );
    
    enum RefFrame
    {
        EME2000,
        ITRF2008
    }
    
    public static final double    POSITION_TOLERANCE   = 0.001;
    public static final double    MIN_STEP             = 0.001;
    public static final double    MAX_STEP             = 900.0;
    public static final double    DEFAULT_STEP         = 300;
    public static final double    PROPAGATION_DURATION = Constants.JULIAN_DAY * 4;
    public static final int       DEGREE               = 10;
    public static final int       ORDER                = 10;
    public static final double    POSITION_SCALE       = 1.0;
    public static final double    THRESHOLD            = 1e-4;
    public static final int       MAX_ITERATIONS       = 10000;
    
    public TLE toTle( Date          epochDate,
                      int           satNum,
                      PVCoordinates posVel,
                      RefFrame      refFrame,
                      OrbitType     orbitType )
    {
        TLE tle = null;

        AbsoluteDate tleEpoch = new AbsoluteDate( epochDate, TimeScalesFactory.getUTC() );
        
        logger.info( "tleEpoch: " + tleEpoch );
        
        org.orekit.frames.Frame frame_eme2000 = org.orekit.frames.FramesFactory.getEME2000();
        
        // Create EME2000 coordinates
        PVCoordinates posVel_eme2000 = null;
        switch ( refFrame )
        {
            
            case EME2000:
            
                logger.info( "Using position/velocity directly as EME2000" );
            
                posVel_eme2000 = posVel;
                
                break;
                
            case ITRF2008:
            
                logger.info( "Converting position/velocity from ITRF2008 to J2000" );
            
                // Transform from ITRF2008 into EME2000
            
               Frame frame_itrf2008 =
                    org.orekit.frames.FramesFactory.getITRF(
                        ITRFVersion.ITRF_2008,
                        IERSConventions.IERS_2010,
                        true );
                    
                PVCoordinates posVel_itrf2008 = posVel;
                    
                posVel_eme2000 = frame_itrf2008.getTransformTo( frame_eme2000, tleEpoch ).transformPVCoordinates( posVel_itrf2008 );
                
                logger.info( "posVel_itrf2008:\n" + posVel_itrf2008 );
                logger.info( "posVel_eme2000:\n" + posVel_eme2000 );

                break;
                
            default:
            
                logger.error( "Cannot transform unsupported Frame Type: " + refFrame );
        }
        
        if ( posVel_eme2000 != null )
        {
            
            // Create propagator
            
            KeplerianOrbit initialOrbit =
                new KeplerianOrbit( posVel_eme2000,
                                    frame_eme2000,
                                    tleEpoch,
                                    Constants.WGS84_EARTH_MU );
                                
            logger.info( "Derived from posVel_eme2000; initialOrbit:\n" + initialOrbit );
            logger.info( "initialOrbit mean motion: " + initialOrbit.getKeplerianMeanMotion() );
            logger.info( "initialOrbit eccentricity: " + initialOrbit.getE() );
    
            SpacecraftState initialState = new SpacecraftState( initialOrbit );

            // Build TLE from propagator
            TLE templateTle =
                new TLE( satNum,
                         (char) 'U',
                         0,
                         0,
                         "",
                         TLE.SGP4,
                         0,
                         tleEpoch,
                         initialOrbit.getKeplerianMeanMotion(),
                         0.0,
                         0.0,
                         initialOrbit.getE(),
                         initialOrbit.getI(),
                         initialOrbit.getPerigeeArgument(),
                         initialOrbit.getRightAscensionOfAscendingNode(),
                         initialOrbit.getMeanAnomaly(),
                         0,
                         0.0 );
            
            tle = TLE.stateToTLE( initialState, templateTle );

        }
        
        return tle;
     }

    public static void main(String[] args)
    {
        // Create a console appender
        Logger rootLogger = Logger.getRootLogger();
        rootLogger.setLevel( Level.DEBUG );
         
        rootLogger.addAppender( new ConsoleAppender( new PatternLayout("%d{ISO8601} [%t] %-5p %c %x - %m%n") ) );
        
        // Orekit Setup
        File                 orekitData = new File( "config" );
        DataProvidersManager manager    = DataContext.getDefault().getDataProvidersManager();
        
        manager.addProvider( new DirectoryCrawler( orekitData ) );
        
        // Create the TLE
        Propagation propagation = new Propagation();
        DateFormat  df          = new SimpleDateFormat( "yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH );
        
        Date tleEpoch = null;
        
        try
        {
            tleEpoch = df.parse( "2021-04-26T14:33:19" );
            logger.info( String.format( "tleEpoch: %s", df.format( tleEpoch ) ) );
        }
        catch ( ParseException ex )
        {
            ex.printStackTrace();
        }

        try
        {
            PVCoordinates posVel_itrf2008 =
                    new PVCoordinates( new Vector3D( 1697870.8879937902, -4.21257001097552E7, 42844.20318276972 ),
                                       new Vector3D( 0.6150806444752561, 0.02471342475392646, 5.2042968514675   )  );
            
            TLE tle =
                propagation.toTle(
                    tleEpoch,
                    25544,
                    posVel_itrf2008,
                    RefFrame.ITRF2008,
                    OrbitType.KEPLERIAN );
            
            logger.info( "ITRF2008 SV to TLE:\n" + tle );
        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
        }
        
        try
        {
            PVCoordinates posVel_eme2000 =
                    new PVCoordinates( new Vector3D( 4.200359594244525E7, 3676319.9465494542, -1.1365146551612585E-7 ),
                                       new Vector3D( -268.08148610660925, 3062.9506187748107, -4.735455668748722E-7  )  );
            
            TLE tle =
                propagation.toTle(
                    Calendar.getInstance().getTime(),
                    25544,
                    posVel_eme2000,
                    RefFrame.EME2000,
                    OrbitType.KEPLERIAN );
            
            logger.info( "EME2000 SV to TLE:\n" + tle );
        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
        }
        
    }
}
